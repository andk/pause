#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';
use lib 't/lib';

use File::pushd;
use File::Temp ();
use Getopt::Long::Descriptive;
use Path::Class;
use PAUSE::TestPAUSE;

my ($opt, $usage) = describe_options(
  '%c %o [USER:]DISTFILE...',
  [ 'dir=s',        'target directory; by default uses a tempdir' ],
  [ 'verbose|v',    'print logs to STDERR as it goes'             ],
  [ 'shell!',       'run a shell in the directory; default: true',
                    { default => 1 } ],
  [ 'dists-from=s', 'program to run to get dist names'            ],
  [ 'each',         'index after each' ],
);

my @uploads;
if ($opt->dists_from) {
  my $cmd = $opt->dists_from;
  @uploads = `$cmd`;
  chomp @uploads;
} else {
  $usage->die({ pre_text => "you didn't give any distfiles!\n\n" })
    unless @uploads = @ARGV;
}

my $dir = $opt->dir;
my $tmpdir;
unless ($dir) {
  $tmpdir = File::Temp->newdir;
  $dir = "$tmpdir";
}

$ENV{EMAIL_SENDER_TRANSPORT_transport_arg_dir} = "$dir/maildir";

my $pause = PAUSE::TestPAUSE->init_new({
  tmpdir                 => dir($dir),
  email_sender_transport => 'Maildir',
});

open my $log_fh, '>', "$dir/pause.log"
  or die "can't open $dir/pause.log for writing: $!\n";

$pause->pause_config_overrides->{LOG_CALLBACK} = sub {
  my (undef, undef, @what) = @_;
  push @what, "\n" unless $what[-1] =~ m{\n$};
  print {$log_fh} @what;
  print STDERR @what if $opt->verbose;
};

my $just_reindexed;

UPLOAD: for my $upload (@uploads) {
  if ($upload eq '-') {
    $pause->test_reindex;
    $just_reindexed = 1;
    next UPLOAD;
  }

  $pause->test_reindex if $opt->each;

  my ($user, $distfile) = split /:/, $upload, 2;
  ($user, $distfile) = (LOCAL => $user) unless defined $distfile;

  $pause->upload_author_file($user => $distfile);
  print {$log_fh} ">>>> Just uploaded $user/$distfile\n";
  print {*STDERR} ">>>> Just uploaded $user/$distfile\n" if $opt->verbose;
  $just_reindexed = 0;
}

$pause->test_reindex unless $just_reindexed;

close $log_fh or warn "error closing $dir/pause.log: $!";

if ($opt->shell) {
  my $chdir_guard = pushd($dir);
  system($ENV{SHELL});
}

1;
