=head1 DESCRIPTION

This repository lives at

    git://github.com/andk/pause.git

and is considered to contain all relevant programs and configuration
data for running pause.perl.org except for the SSL key and certificate
and files containing passwords or other sensible data.

Other places with docs:

  lib/PAUSE.pod

=head1 HOW TO SET UP A PRIVATE PAUSE SERVER

These instructions describe how to set up a private, or local, PAUSE
server for development and testing.

=head2 Install dependencies

PAUSE unit tests can run with sqlite, but running a private PAUSE requires
mysql.  It is known to work with mysql 5.7 but may work with other versions
as well.

Install all Perl dependencies listed in the Makefile.PL file.  If
everything worked OK, you should be able to run C<plackup> from the root of
the repository and have a local web server running that shows PAUSE -- but
this lacks any config, authentication or data, which you'll set up next.

=head2 Setup authentication and data

PAUSE runs with two databases: 'authen_pause' for user credentials and
'mod' for everything else.

B<NOTE>: Users need to exist in *both* the 'authen_pause' database (for
login credentials) and the 'mod' database (for PAUSE user ID data).

Also, user ID's need to be B<UPPER-CASE> in both 'authen_pause' and 'mod'.

=head3 Setup the mod database

You can set up the mod database from scratch like this:

  mysqladmin -uroot -p create mod
  mysql      -uroot -p authen_pause < doc/mod.schema.txt

However, if you want to start with a copy of PAUSE's existing database,
you can create the database, rsync a backup and restore it -- but beware
that this can take a very long time to import:

  mysqladmin -u root -p create mod
  rsync -vaP pause.perl.org::pausedata/moddump.current.bz2 .
  bzcat moddump.current.bz2 | perl -ple 's/^CHANGE MASTER.*//' | \
    mysql -uroot -p mod

You can also fetch the dump from
https://pause.perl.org/pub/PAUSE/PAUSE-data/moddump.current.bz2 but
this will require PAUSE authentication.

If you are not using the existing database, you should set up a new user
ID to use:

  mysql -uroot -p mod -e 'insert into users (userid) values ("ANDK")'

=head3 Setup the authen_pause database

The 'authen_pause' database isn't available to download so you can only set
it up from scratch.

  mysqladmin -uroot -p create authen_pause
  mysql      -uroot -p authen_pause < doc/authen_pause.schema.txt

While PAUSE no longer defaults to using 'crypt' for passwords, we can use
it to bootstrap an admin user.  Prepare your crypted password with something like

  perl -le 'print crypt "tiger","ef"'

and insert the result into a record for yourself like

  mysql -uroot -p authen_pause -e 'insert into usertable (user,password) values ("ANDK", "efFjeW1wwgHzw")'

Make the username matches a username that exists in the mod.users table.

You probably want to make yourself an admin to try out the admin
interfaces:

  mysql -uroot -p authen_pause -e 'insert into grouptable (user,ugroup) values ("ANDK", "admin")'

=head2 Configuring PAUSE

And finally we must make these databases available to the webserver when it
runs.  We do this via a private configuration file:

  mkdir -p ../pause-private/lib

Edit C<../pause-private/lib/PrivatePAUSE.pm> and enter something like this:

  use strict;
  package PAUSE;

  $ENV{EMAIL_SENDER_TRANSPORT} = 'DevNull';

  our $Config;
  $Config->{AUTHEN_DATA_SOURCE_USER}  = "user1";
  $Config->{AUTHEN_DATA_SOURCE_PW}    = "secret1";
  $Config->{MOD_DATA_SOURCE_USER}     = "user2";
  $Config->{MOD_DATA_SOURCE_PW}       = "secret2";
  $Config->{MAIL_MAILER}              = ["testfile"];

Replace 'user1', etc. with 'root' and root's password if you're doing local
testing with a root user.  The C<EMAIL_SENDER_TRANSPORT> environment
variable and C<MAIL_MAILER> config variable prevent emails from being sent
by accident when testing.

=head2 Configuring the filesystem

To support sessions, you'll need to set the C<RUNDATA> config option to a
directory:

  mkdir -p /tmp/pause_1999

Then set that into PrivatePAUSE.pm

  $Config->{RUNDATA} = "/tmp/pause_1999";

=head2 Configuring web server and reverse-proxy

=head3 Without TLS

If you don't care about TLS, add a C<TESTHOST_SCHEMA> config entry to
PrivatePAUSE.pm:

  $Config->{TESTHOST_SCHEMA}           = "http";

You can now run "plackup" and browse at the port it shows you.  You may
need to include the path to your PrivatePAUSE file:

  plackup -I ../pause-private/lib

A red rectangle on the upper right reminds you that you're not using
SSL which is usually OK for the development platform.

=head3 With TLS

In order to use TLS you need a reverse-proxy web-server that can provide
TLS.  You will need to create a self-signed certificate and key file for
localhost and configure your web server to use them.

For example, to configure nginx to be a reverse-proxy, see the sample
configuration file C<docs/nginx-pause-config.sample>.  You will need to
listen on port 80 and port 443 for 'http' and 'https', respectively.

Run plackup after you configure nginx and you should be able to access
C<https://localhost/pause/authenquery>.  You may need to include the
path to your PrivatePAUSE file:

  plackup -I ../pause-private/lib

=head1 DEPLOYING A PRODUCTION PAUSE

=head2 Excluded files

The following file has been excluded from the repository for obvious
reasons:

    privatelib/PrivatePAUSE.pm

PrivatePAUSE.pm contains only the usernames and passwords of the mysql
users that own the two databases. See below for "Database schema".

Other sensitive files, like the SSL key of the server, password files,
sshd_config need to be maintained separately from the repository. See
below the section about user management.

=head2 File system layout

On PAUSE most config files live in /home/k/PAUSE. Where files are
needed elsewhere in the filesystem, we used to use symlinks. Cfengine
was chosen to maintain the symlinks during the hardware upgrade in
March 2006, so all the symlinks needed are now listed in the
etc/cfengine directory.

[ MISSING documentation:

  /etc/cron.jobs/indexscripts.pl    -> ../../home/kstar/cron/indexscripts.pl
  /etc/security/limits.conf         -> ../../home/k/PAUSE/etc/security/limits.conf

]

(XXX integrate indexscripts.pl with the help of kstar)

=head2 External programs needed to run PAUSE

  apache1.x with mod_perl
  perl
  mysqld
  Apache-SSL (optional)
  mirror     (the good old one; optional)
  mon        (optional)
  proftpd    (optional)
  rsync      (runs as daemon; optional)
  gpg        (optional)
  unzip      (optional)

At the time of this writing (2009), all perl scripts were running
under 5.10.0

Apache-SSL is also known as Ben-SSL as it was written by Ben Laurie
and is available from ftp://ftp.ox.ac.uk/pub/crypto/SSL/Apache-SSL

=head2 Database schema

The files doc/*.schema.txt document the schema of the two databases. A
dump of the mod database is produced every few hours and available for
download in the ftp area. A dump of the authen_pause database is -- of
course -- not available.

=head2 User management

This section is about the fun of makeing mysql safe based on UNIX user
and group permissions. This is dangerous stuff. Be careful here and
follow the advice in the mysql manual about how to secure mysql in
general.

User "nobody" runs the web server.

PAUSE is running processes as user root, nobody, SVN, ftp, and UNSAFE.
The user "k" in the group "k" owns the working copy of the repository
and all the sensitive files. Group "k" must contain all users who
should be able to read sensitive data. So at least "nobody" (who runs
the webserver) must be in that group. Sensitive directories and files
must be group-readable and must not be world readable. The SSL data
for the webservers should not even be readable by that group, only by
root who starts the webservers.

This setup must ensure that the user UNSAFE cannot read the database
account informations. On the database side this is achieved by
granting the privileges on the two tables, nothing else, to one user.
The grant statement looks something like

  grant delete,index,insert,select,update,lock tables on `mod`.* to \
        'xxx'@'yyy' identified by 'zzz';

For replication, three additional privileges are needed: "reload,
super, replication client".

As an experimental feature we allowed replication to the world with

  grant replication slave on *.* to repl@'%' identified by 'perl';

This is the user whose access codes are stored in PrivatePAUSE.pm. The
root password to mysql is not needed by any script, so can be stored
offline.

=head2 Other security considerations

We practice security by visibility by giving the users as much
information as possible about the status of their requests. This is
mostly done by sending them mail about every action they take.

Another important axiom is that we disallow overwriting of files
except for pure documentation files. That way the whole CPAN cannot
fall out of sync and inconsistencies can be tracked easily. It opens
us the possibility to maintain a I<backpan>, a backup of all relevant
files of all times. Any attempt to upload malicious code can thus be
tracked much better.

=head2 Missing pieces

As always, there are things we didn't bother to integrate into the
repository because they are so basic stuff for any UNIX machine:

  logrotate
  xntpd
  sendmail

and probably more. If you discover pieces that are important but
missing in the repository or documentation, please let us know.

=head2 Undocumented

Other things that need to be setup somehow:

  gpg signing key

=cut
